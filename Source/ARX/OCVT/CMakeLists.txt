if(NOT ARX_TARGET_PLATFORM_WINDOWS)
  if(NOT ARX_TARGET_PLATFORM_EMSCRIPTEN)
    find_package(JPEG REQUIRED)
  endif()
else()
	find_path(JPEG_INCLUDE_DIR
		NAMES jconfig.h jmorecfg.h jpeglib.h jversion.h
		PATHS ${PROJECT_SOURCE_DIR}/depends/windows/include
		DOC "The directory where jpeg headers resides"
	)

	find_library(JPEG_LIBRARIES
		NAMES libjpeg
		PATHS ${PROJECT_SOURCE_DIR}/depends/windows/lib/x64
		DOC "The directory where jpeg static library resides"
	)
endif()

set(PUBLIC_HEADERS
    include/ARX/OCVT/PlanarTracker.h
)


set(PRIVATE_HEADERS
    OCVConfig.h
    OCVUtils.h
    OCVFeatureDetector.h
    HomographyInfo.h
    HarrisDetector.h
    TrackableInfo.h
    TrackedPoint.h
    TrackingPointSelector.h
)

set(SOURCE
    OCVConfig.cpp
    HarrisDetector.cpp
    OCVFeatureDetector.cpp
    PlanarTracker.cpp
    TrackedPoint.cpp
    TrackingPointSelector.cpp
    HomographyInfo.cpp
)

add_library(OCVT STATIC
    ${PUBLIC_HEADERS} ${SOURCE}
)

target_include_directories(OCVT
    PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/../ARUtil/include
    PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/../AR/include
    PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/include/ARX/OCVT
    PRIVATE ${OpenCV_INCLUDE_DIR}
)


if(NOT ARX_TARGET_PLATFORM_WINDOWS)
	target_link_libraries(OCVT
		INTERFACE ${LIBS}
		PRIVATE ${OpenCV_LIBS}
	)
else()
	set (LINK_LIST "")

	foreach(x ${OpenCV_LIBS})
		string(REPLACE ".lib" "341d.lib" x_debug ${x})
		list (APPEND LINK_LIST debug ${x_debug} optimized ${x})
	endforeach()

	target_link_libraries(OCVT
		INTERFACE ${LIBS}
	    ${LINK_LIST}
	)
endif()

# Pass on headers to parent.
string(REGEX REPLACE "([^;]+)" "OCVT/\\1" hprefixed "${PUBLIC_HEADERS}")
set(FRAMEWORK_HEADERS
   ${FRAMEWORK_HEADERS}
   ${hprefixed}
   PARENT_SCOPE
)
